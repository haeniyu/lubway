<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="StatisticsDAO">

	<select id="getTodaySales" resultType="int">
		<![CDATA[
		SELECT SUM(total_price) FROM order_code WHERE order_time >= CURRENT_DATE and order_time < CURRENT_DATE+1
		]]>
	</select>
	
	<select id="getThisMonthSales" resultType="int">
		<![CDATA[
		SELECT SUM(total_price) FROM order_code WHERE SUBSTRING(CURRENT_DATE::text, 6,2)=SUBSTRING(order_time::text, 6,2);
		]]>
	</select>
	
	<select id="getThisYearSales" resultType="int">
		<![CDATA[
		SELECT SUM(total_price) FROM order_code WHERE SUBSTRING(CURRENT_DATE::text, 1,4)=SUBSTRING(order_time::text, 1,4);
		]]>
	</select>

	<!-- 매장별 매출 현황 총 데이터 수 -->
	<select id="getBasicStatCnt" resultType="int">
		select count(*) from order_code
	</select>

	<!-- 매장별 매출 현황 총 데이터 정보 -->
	<select id="getBasicOrderList" resultType="stat">
		select order_time::date, store_name, order_type, payment_list, total_price
		from order_code 
		order by order_time::date limit #{listSize} offset #{startList}
	</select>

	<!-- 매장별 매출 현황 총 데이터 Chart -->
	<select id="getBasicStat" resultType="stat">
		with order_sales as(
			select
				order_time::date
				,substring(order_time::date::text, 1,7) as year_month
				,sum(total_price) as total
				,sum(total_price - use_coupon - use_point) as real_total
				,sum(use_coupon) as coupon
				,sum(use_point) as point
				,count(case when order_type='방문포장' or order_type= '매장식사' then 1 end) as fast
				,count(case when order_type='배달' then 1 end) as home
			from order_code
			group by order_time::date
		)
		select *, sum(total) over(partition by year_month order by order_time::date rows unbounded preceding)
		from order_sales
		order by order_time::date
	</select>
	
	<!-- 매장별 매출 현황 검색 데이터 수 -->
	<select id="getSearchStatCnt" resultType="int">
		select count(*) from order_code where 
			store_name like '%'||#{store_name}||'%' and 
			order_type like '%'||#{order_type}||'%' and 
			payment_list like '%'||#{payment_list}||'%' and
			order_time::date BETWEEN TO_TIMESTAMP(#{start}, 'YYYY-MM-DD HH24:MI:SS') 
								 and TO_TIMESTAMP(#{end}, 'YYYY-MM-DD HH24:MI:SS')
	</select>

	<!-- 매장별 매출 현황 검색 데이터 정보 -->
	<select id="getSearchOrderList" resultType="stat">
		select * from (
			select order_time::date, store_name, order_type, payment_list, total_price
			from ( 
				select * from order_code 
				where store_name like '%'||#{store_name}||'%' and order_type like '%'||#{order_type}||'%' and payment_list like '%'||#{payment_list}||'%' and
				order_time::date BETWEEN TO_TIMESTAMP(#{start}, 'YYYY-MM-DD HH24:MI:SS') 
								 and TO_TIMESTAMP(#{end}, 'YYYY-MM-DD HH24:MI:SS')
				order by no asc) as three
			order by order_time desc
			limit #{listSize} offset #{startList}
			) as two
	</select>

<<<<<<< HEAD
	<!-- 총매출현황 영역그래프 쿼리 -->
=======
	<!-- 매장별 매출 현황 검색 데이터 Chart -->
>>>>>>> chart
	<select id="getSearchStat" parameterType="stat" resultType="stat">
		with order_sales as(
			select order_time::date, 
				substring(order_time::date::text, 1,7) as year_month 
				,sum(total_price) as total
				,sum(total_price - use_coupon - use_point) as real_total
				,sum(use_coupon) as coupon
				,sum(use_point) as poin
				,count(case when order_type='방문포장' or order_type= '매장식사' then 1 end) as fast
				,count(case when order_type='배달' then 1 end) as home
			from order_code 
			where store_name like '%'||#{store_name}||'%' and order_type like '%'||#{order_type}||'%' and payment_list like '%'||#{payment_list}||'%' and
				  order_time::date BETWEEN TO_TIMESTAMP(#{start}, 'YYYY-MM-DD HH24:MI:SS') 
									   AND TO_TIMESTAMP(#{end}, 'YYYY-MM-DD HH24:MI:SS') 
			group by order_time::date
		)
		select *, sum(total) over(partition by year_month order by order_time::date rows unbounded preceding)
		from order_sales
		order by order_time::date
	</select>
	
	<!-- 품목별 매출 현황 총 데이터 수 -->
	<select id="getProductBasicStatCnt" resultType="int">
		select count(*) from order_list
	</select>

	<!-- 품목별 매출 현황 총 데이터 정보 -->
	<select id="getProductBasicOrderList" resultType="stat">
		select order_time::date, menu_type, menu_name, order_type, payment_list, total_price
		from order_code a 
		right outer join order_list b on b.no = a.no 
		order by a.order_time::date limit #{listSize} offset #{startList}
	</select>

	<!-- 품목별 매출 현황 총 데이터 Chart -->
	<select id="getProductBasicStat" resultType="stat">
		select
			order_time::date,
			substring(order_time::date::text, 1,7) as year_month,
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a 
		right outer join order_list b on b.no = a.no
		group by order_time::date
		order by order_time::date		
	</select>
	
	<!-- 품목별 매출 현황 총 데이터 Type Chart -->
	<select id="getProductBasicTypeStat" resultType="stat">
		select
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a 
		right outer join order_list b on b.no = a.no
	</select>

	<!-- 품목별 매출 현황 검색 데이터 수 -->
	<select id="getProductSearchStatCnt" resultType="int">
		select count(*)
		from order_code a 
		right outer join order_list b on b.no = a.no where 
			b.menu_type like '%'||#{menu_type}||'%' and 
			b.menu_name like '%'||#{menu_name}||'%' and 
			a.order_type like '%'||#{order_type}||'%' and 
			a.payment_list like '%'||#{payment_list}||'%' and
			order_time::date BETWEEN TO_TIMESTAMP(#{start}, 'YYYY-MM-DD HH24:MI:SS') 
								 and TO_TIMESTAMP(#{end}, 'YYYY-MM-DD HH24:MI:SS')
	</select>

	<!-- 품목별 매출 현황 검색 데이터 정보 -->
	<select id="getProductSearchOrderList" resultType="stat">
		select order_time::date, menu_type, menu_name, order_type, payment_list, total_price
		from order_code a 
		right outer join order_list b on b.no = a.no 
		where menu_type like '%'||#{menu_type}||'%' and 
			  menu_name like '%'||#{menu_name}||'%' and 
			  order_type like '%'||#{order_type}||'%' and 
			  payment_list like '%'||#{payment_list}||'%' and 
			  order_time::date BETWEEN to_timestamp(#{start},'YYYY-MM-DD HH24:MI:SS')
			  					   and to_timestamp(#{end},'YYYY-MM-DD HH24:MI:SS') 
		order by a.order_time::date limit #{listSize} offset #{startList}
	</select>

	<!-- 품목별 매출 현황 검색 데이터 Chart -->
	<select id="getProductSearchStat" resultType="stat">
		select
			order_time::date,
			substring(order_time::date::text, 1,7) as year_month,
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a
		right outer join order_list b on b.no = a.no
		where menu_type like '%'||#{menu_type}||'%' and 
			  order_type like '%'||#{order_type}||'%' and 
			  payment_list like '%'||#{payment_list}||'%' and 
			  order_time::date BETWEEN to_timestamp(#{start},'YYYY-MM-DD HH24:MI:SS') and 
			  to_timestamp(#{end},'YYYY-MM-DD HH24:MI:SS')
		group by order_time::date
		order by order_time::date		
	</select>

	<!-- 품목별 매출 현황 검색 데이터 Type Chart -->
	<select id="getProductSearchTypeStat" resultType="stat">
		select
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a 
		right outer join order_list b on b.no = a.no
		where order_type like '%'||#{order_type}||'%' and 
			  payment_list like '%'||#{payment_list}||'%' and 
			  order_time::date BETWEEN to_timestamp(#{start},'YYYY-MM-DD HH24:MI:SS') and 
			  to_timestamp(#{end},'YYYY-MM-DD HH24:MI:SS')
	</select>
	
	<select id="getMenuName" parameterType="string" resultType="string">
		select name from ${select}
	</select>
	
	<select id="getStoreMonthSales" resultType="int">
		<![CDATA[
		SELECT SUM(total_price) FROM order_code WHERE SUBSTRING(CURRENT_DATE::text, 6,2)=SUBSTRING(order_time::text, 6,2) and store_name=#{store_name};
		]]>
	</select>
	
	<select id="getStoreYearSales" resultType="int">
		<![CDATA[
		SELECT SUM(total_price) FROM order_code WHERE SUBSTRING(CURRENT_DATE::text, 1,4)=SUBSTRING(order_time::text, 1,4) and store_name=#{store_name};
		]]>
	</select>
	
	<!-- 엑셀 쿼리문 -->
	<select id="getSearchOrderListForExcel" resultType="stat">

		select order_time::date, order_type, store_name, payment_list
			 ,sum(total_price) as total
			 ,sum(total_price - use_coupon - use_point) as real_total
			 ,sum(use_coupon) as coupon
			 ,sum(use_point) as point
	      	  from order_code 
				  where store_name like '%'||#{store_name}||'%' and order_type like '%'||#{order_type}||'%' and payment_list like '%'||#{payment_list}||'%' and
				  order_time::date BETWEEN TO_TIMESTAMP(#{start}, 'YYYY-MM-DD HH24:MI:SS') 
				  				   AND TO_TIMESTAMP(#{end}, 'YYYY-MM-DD HH24:MI:SS') 
	      	  group by order_time::date , order_type, store_name, payment_list
			
	</select>
	

</mapper>
