<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="StoreInfoDAO">

	<insert id="insertStoreInfo" parameterType="storeInfo">
		INSERT INTO storeinfo (code, storename, area, zipcode, address_road, address_detail, store_tel, parking, open, close)
		VALUES(#{code},#{storename},#{area},#{zipcode},#{address_road},#{address_detail},#{store_tel},#{parking},#{open},#{close})
	</insert>

	<select id="getStoreInfo" parameterType="String" resultType="storeInfo">
		SELECT
		*
		FROM storeinfo
		WHERE storename = #{storename}
	</select>
	
	<update id="updateStoreInfo" parameterType="storeInfo">
		UPDATE storeinfo SET open=#{open}, close=#{close}, 
		morning_usable=#{morning_usable}, fastway_usable=#{fastway_usable}, homeway_usable=#{homeway_usable}
		WHERE storename = #{storename}
	</update>
	
	<select id="findStore" parameterType="String" resultType="storeInfo">
		SELECT * FROM storeinfo
		WHERE address_road LIKE '%'||#{keyword}||'%'
		ORDER BY NO DESC
	</select>
	
	<select id="fastwayStore" parameterType="String" resultType="storeInfo">
		SELECT * FROM storeinfo
		WHERE address_road LIKE '%'||#{keyword}||'%'
		AND fastway_usable = TRUE
		ORDER BY NO DESC
	</select>

	<select id="homewayStore" parameterType="String" resultType="storeInfo">
		SELECT * FROM storeinfo
		WHERE address_road LIKE '%'||#{keyword}||'%'
		AND homeway_usable = TRUE
		ORDER BY NO DESC
	</select>
	
	<select id="getStoreInfoByNo" resultType="storeInfo" parameterType="int">
		SELECT * FROM storeinfo WHERE no=#{no}
	</select>

	<!-- 품목별 매출 현황 총 데이터 수 -->
	<select id="getProductBasicStatCnt" parameterType="string" resultType="int">
		select count(*)
		from order_code a
		right outer join order_list b on b.no = a.no
		where a.store_name = #{name}
	</select>

	<!-- 품목별 매출 현황 총 데이터 정보 -->
	<select id="getProductBasicOrderList" resultType="storeStat">
		select order_time::date, menu_type, menu_name, order_type, payment_list, total_price
		from order_code a 
		right outer join order_list b on b.no = a.no
		where a.store_name = #{store_name}
		order by order_time::date desc limit #{listSize} offset #{startList}
	</select>

	<!-- 품목별 매출 현황 총 데이터 Chart -->
	<select id="getProductBasicStat" parameterType="string" resultType="storeStat">
		select
			order_time::date,
			substring(order_time::date::text, 1,7) as year_month,
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a 
		right outer join order_list b on b.no = a.no
		where a.store_name = #{name}
		group by order_time::date
		order by order_time::date		
	</select>
	
	<!-- 품목별 매출 현황 총 데이터 Type Chart -->
	<select id="getProductBasicTypeStat" parameterType="string" resultType="storeStat">
		select
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a 
		right outer join order_list b on b.no = a.no
		where a.store_name = #{name}
	</select>

	<!-- 품목별 매출 현황 검색 데이터 수 -->
	<select id="getProductSearchStatCnt" resultType="int">
		select count(*)
		from order_code a 
		right outer join order_list b on b.no = a.no where
			a.store_name = #{store_name} and
			b.menu_type like '%'||#{menu_type}||'%' and 
			b.menu_name like #{menu_name} and 
			a.order_type like '%'||#{order_type}||'%' and 
			a.payment_list like '%'||#{payment_list}||'%' and
			order_time::date BETWEEN TO_TIMESTAMP(#{start}, 'YYYY-MM-DD HH24:MI:SS') 
								 and TO_TIMESTAMP(#{end}, 'YYYY-MM-DD HH24:MI:SS')
	</select>

	<!-- 품목별 매출 현황 검색 데이터 정보 -->
	<select id="getProductSearchOrderList" resultType="storeStat">
		select order_time::date, menu_type, menu_name, order_type, payment_list, total_price
		from order_code a 
		right outer join order_list b on b.no = a.no 
		where a.store_name = #{store_name} and
			  menu_type like '%'||#{menu_type}||'%' and 
			  menu_name like #{menu_name} and 
			  order_type like '%'||#{order_type}||'%' and 
			  payment_list like '%'||#{payment_list}||'%' and 
			  order_time::date BETWEEN to_timestamp(#{start},'YYYY-MM-DD HH24:MI:SS')
			  					   and to_timestamp(#{end},'YYYY-MM-DD HH24:MI:SS') 
		order by order_time::date desc limit #{listSize} offset #{startList}
	</select>

	<!-- 품목별 매출 현황 검색 데이터 Chart -->
	<select id="getProductSearchStat" resultType="storeStat">
		select
			order_time::date,
			substring(order_time::date::text, 1,7) as year_month,
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a
		right outer join order_list b on b.no = a.no
		where a.store_name = #{store_name} and
			  menu_type like '%'||#{menu_type}||'%' and 
			  menu_name like #{menu_name} and
			  order_type like '%'||#{order_type}||'%' and 
			  payment_list like '%'||#{payment_list}||'%' and 
			  order_time::date BETWEEN to_timestamp(#{start},'YYYY-MM-DD HH24:MI:SS') and 
			  to_timestamp(#{end},'YYYY-MM-DD HH24:MI:SS')
		group by order_time::date
		order by order_time::date		
	</select>

	<!-- 품목별 매출 현황 검색 데이터 Type Chart -->
	<select id="getProductSearchTypeStat" resultType="storeStat">
		select
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a 
		right outer join order_list b on b.no = a.no
		where a.store_name = #{store_name} and
			  order_type like '%'||#{order_type}||'%' and 
			  payment_list like '%'||#{payment_list}||'%' and 
			  order_time::date BETWEEN to_timestamp(#{start},'YYYY-MM-DD HH24:MI:SS') and 
			  to_timestamp(#{end},'YYYY-MM-DD HH24:MI:SS')
	</select>
	
	<!-- 품목별 매출 현황 검색X 데이터 수 -->
	<select id="getNotProductSearchStatCnt" resultType="int">
		select count(*)
		from order_code a 
		right outer join order_list b on b.no = a.no where
			a.store_name = #{store_name} and
			b.menu_type like '%'||#{menu_type}||'%' and 
			b.menu_name like '%'||#{menu_name}||'%' and 
			a.order_type like '%'||#{order_type}||'%' and 
			a.payment_list like '%'||#{payment_list}||'%' and
			order_time::date BETWEEN TO_TIMESTAMP(#{start}, 'YYYY-MM-DD HH24:MI:SS') 
								 and TO_TIMESTAMP(#{end}, 'YYYY-MM-DD HH24:MI:SS')
	</select>

	<!-- 품목별 매출 현황 검색X 데이터 정보 -->
	<select id="getNotProductSearchOrderList" resultType="storeStat">
		select order_time::date, menu_type, menu_name, order_type, payment_list, total_price
		from order_code a 
		right outer join order_list b on b.no = a.no 
		where a.store_name = #{store_name} and
			  menu_type like '%'||#{menu_type}||'%' and 
			  menu_name like '%'||#{menu_name}||'%' and 
			  order_type like '%'||#{order_type}||'%' and 
			  payment_list like '%'||#{payment_list}||'%' and 
			  order_time::date BETWEEN to_timestamp(#{start},'YYYY-MM-DD HH24:MI:SS')
			  					   and to_timestamp(#{end},'YYYY-MM-DD HH24:MI:SS') 
		order by order_time::date desc limit #{listSize} offset #{startList}
	</select>

	<!-- 품목별 매출 현황 검색X 데이터 Chart -->
	<select id="getNotProductSearchStat" resultType="storeStat">
		select
			order_time::date,
			substring(order_time::date::text, 1,7) as year_month,
			sum(case when menu_type='sandwich' then total_price end) as sandwich,
			sum(case when menu_type='salad' then total_price end) as salad,
			sum(case when menu_type='wrap' then total_price end) as wrap,
			sum(case when menu_type='side' then total_price end) as side
		from order_code a
		right outer join order_list b on b.no = a.no
		where a.store_name = #{store_name} and
			  menu_type like '%'||#{menu_type}||'%' and 
			  menu_name like '%'||#{menu_name}||'%' and 
			  order_type like '%'||#{order_type}||'%' and 
			  payment_list like '%'||#{payment_list}||'%' and 
			  order_time::date BETWEEN to_timestamp(#{start},'YYYY-MM-DD HH24:MI:SS') and 
			  to_timestamp(#{end},'YYYY-MM-DD HH24:MI:SS')
		group by order_time::date
		order by order_time::date		
	</select>
	
	<select id="getMenuName" parameterType="string" resultType="string">
		select name from ${select}
	</select>

</mapper>
